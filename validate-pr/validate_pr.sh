#!/usr/bin/env bash

# bash strict mode -- http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

if ! command -v hub; then
    echo 'Error: GitHub command line tool is not installed.' >&2
    # Don't error. Might not even need it.
fi

if [ -z "$BASE_BRANCH" ] || [ -z "$HEAD_BRANCH" ] || [ -z "$PR_NUMBER" ] || [ -z "$PR_TITLE" ]; then
    echo "PR info not specified" >&2
    exit 1
fi

ERROR_FILE="errors.tmp"
if [ -f "$ERROR_FILE" ]; then
    rm "$ERROR_FILE"
fi

REL_PATTERN='^release([0-9]+\.[0-9]+)$'           # release20.11
SNAP_PATTERN='^release([0-9]+\.[0-9]+)-SNAPSHOT$' # release20.11-SNAPSHOT
FF_PATTERN='^ff_([0-9]+\.[0-9]+).+'               # ff_20.11.0
FB_PATTERN='^fb_.+'                               # fb_newFeature_12345
RFB_PATTERN='^([0-9]+\.[0-9]+)_fb_.+'             # 20.11_fb_backportFeature_12345

{
    # 'fb_*' should target 'develop'
    if [[ "$HEAD_BRANCH" =~ $FB_PATTERN ]]; then
        if [ "$BASE_BRANCH" != "develop" ]; then
            echo "*WARNING*: A pull request from \`${HEAD_BRANCH}\` is expected to target \`develop\`, not \`${BASE_BRANCH}\`"
            if [[ "$BASE_BRANCH" =~ $SNAP_PATTERN ]] || [[ "$BASE_BRANCH" =~ $REL_PATTERN ]]; then
                version=${BASH_REMATCH[1]}
                echo "If this branch is intended for ${version}, it should be named \`${version}_${HEAD_BRANCH}\`"
            fi
        fi
    # 'XX.Y_fb_*' should target 'releaseXX.Y-SNAPSHOT'
    elif [[ "$HEAD_BRANCH" =~ $RFB_PATTERN ]]; then
        version=${BASH_REMATCH[1]}
        expected_branch="release${version}-SNAPSHOT"
        if [ "$BASE_BRANCH" != "$expected_branch" ]; then
            echo "*WARNING*: A pull request from \`${HEAD_BRANCH}\` is expected to target \`${expected_branch}\`, not \`${BASE_BRANCH}\`"
        fi
    # 'ff_XX.Y.Z' should target 'releaseXX.Y'
    elif [[ "$HEAD_BRANCH" =~ $FF_PATTERN ]]; then
        version=${BASH_REMATCH[1]}
        expected_branch="release${version}"
        if [ "$BASE_BRANCH" != "$expected_branch" ]; then
            echo "*WARNING*: A pull request from \`${HEAD_BRANCH}\` is expected to target \`${expected_branch}\`, not \`${BASE_BRANCH}\`"
            echo "_Note: \`ff_*\` branches are reserved for LabKey's semi-automated release process._"
        fi
    # Warn about non-standard branch targeting a release branch
    elif [[ "$BASE_BRANCH" =~ $SNAP_PATTERN ]] || [[ "$BASE_BRANCH" =~ $REL_PATTERN ]]; then
        version=${BASH_REMATCH[1]}
        echo "*WARNING*: Branch doesn't match LabKey naming scheme"
        echo "A branch intended for \`${version}\` should be named something like \`${version}_fb_${HEAD_BRANCH}\`"
    # Warn about non-standard branch targeting 'develop'
    elif [ "$BASE_BRANCH" == "develop" ]; then
        echo "*WARNING*: Branch doesn't match LabKey naming scheme"
        echo "A branch intended for \`develop\` should be named something like \`fb_${HEAD_BRANCH}\`"
    fi

    # Only 'ff_*' branches should target non-snapshot release branch
    if [[ "$BASE_BRANCH" =~ $REL_PATTERN ]] && ! [[ "$HEAD_BRANCH" =~ $FF_PATTERN ]]; then
        echo "_Note: Pull requests should not target non-snapshot release branches directly._"
    fi
} >>"$ERROR_FILE"

DEFAULT_TITLE="^Fb | fb "
# Warn about using default pull request title
if [[ "$PR_TITLE" =~ $DEFAULT_TITLE ]]; then
    if [ "$(wc -l <"${ERROR_FILE}")" -gt 0 ]; then
        echo "" >>"$ERROR_FILE" # Insert blank line after other errors.
    fi
    echo "This PR appears to have the default title generated by GitHub. Please use something more descriptive." >>"$ERROR_FILE"
fi

if [ "$(wc -l <"${ERROR_FILE}")" -gt 0 ]; then
    cat "$ERROR_FILE" >&2
    if [ "$PR_NUMBER" != "TEST" ]; then
        hub api "repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments" --field "body=@${ERROR_FILE}"
    else
        exit 1 # Allow easier testing
    fi
else
    echo "Pull request '${PR_TITLE}' from '${HEAD_BRANCH}' to '${BASE_BRANCH}' looks good."
fi
